[section Launch Modes]
[section Child]

The standard version is to create a child, which will spawn the process.

    child c("ls");

This will create an attached child process.

[endsect]

[section System]

As a convenience, the [funcref boost::process::system] function is provided. It works as std::system, though it allows
all the properties boost.process provides. It will execute the process and wait for it's exit; then return the exit_code.

   int ret = system("ls");
   
[caution When used with Pipes it will almost always result in a dead-lock.]

When using this function with an asynchronous properties and NOT passing an io_service object,
the system function will create one and run it. When the io_service is passed to the function, the system function will check if it is active,
and call the io_service::run function if not.

[endsect]

[section Spawn]

Another function which is more then convenience is the  [funcref boost::process::spawn] function. 
This function starts a process and immediately detaches it. It thereby prevents the system from creating a zombie process,
but will also cause the system to be unable to wait for the child to exit.

   spawn("ls");
   
[caution There is no guarantee that the child process will survive the father process terminating. This is dependant on the Operating System.]   
[note This function does not allow the usage of [#quickbook.ref.id asynchronous properties] ]
[endsect]
[endsect]


