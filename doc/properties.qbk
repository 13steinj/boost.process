[section Properties]


[section Cmd]
    
    #include <boost/process/cmd.hpp>

The cmd property allows to explicitly set commands for the execution.

    system(cmd="gcc --version");
    
For any range or single value the following 
expressions are valid:

```
//assign
cmd="value";
cmd(value);
```

The overload form applies when only one string is passed to a launching function.
The string will be internally parsed and split at spaces.
[endsect]

[section:args Args]
    
    #include <boost/process/args.hpp>

The args property allows to explicitly set arguments for the execution.

    system("gcc", args={"--version"});
    
For any range or single value (including std::intializer_list) the following 
expressions are valid:

```
//assign
args="value";
args(value);
args={"val1", "val2"};
args({"val1", "val2"});

//append
args="value";
args={"val1", "val2"};
```

The overload form is used when more than one string is passed, from the second one forward.
I.e. the following expressions are equivalent:

```
spawn("gcc", "--version");
spawn("gcc", args="--version");
```

[note A string will be parsed and set in quotes if it has none and contains spaces.]

[endsect]



[section:exe Exe]
    
    #include <boost/process/exe.hpp>

The exe initializer allows to explicitly set arguments for the execution.

    system(exe="gcc");
    
For any range or single value the following 
expressions are valid:

```
//assign
exe="value";
exe(value);
```

The overload form applies for the first string argument when several string are
passed. It will be used from any position if a boost::filesystem::path is passed.

[endsect]



[section:shell Shell]
    
    #include <boost/process/shell.hpp>

The shell property enables to launch a program through the shell of the system.

    system("gcc", shell);
    
The shell argument goes without any expression. The operator() is overloaded, to 
obtain the path of the system shell.

    auto shell_cmd = shell();
    
[caution Launching through the shell will NOT provide proper error handling, i.e.
you will get an error via the return code]
[endsect]



[section:error Error]
    
    #include <boost/process/error.hpp>

The error property will set the executor to handle any errors by setting an
error_code.

    std::error_code ec;
    system("gcc", error(ec));
    
The overload is achieved by just passing an std::error_code to the function.

The property has two aliases:
 
* `error_ref`
* `error_code`
 
[note This will disable the exception.]
    
[endsect]



[section:ignore_error Ignore_Error]
    
    #include <boost/process/error.hpp>

The ignore_error property will disable any error handling. This can be useful
on linux, where error handling will require a pipe.
    
[endsect]



[section:throw_on_error Throw_On_Error]
    
    #include <boost/process/error.hpp>

The throw_on_error property will enable the exception when launching a process.
It is unnecessary by default, but may be used, when an additional error_code is provided.
    
[endsect]

[section:io_service io_service]

    #include <boost/process/async.hpp>

An io_service must be passed to enable the asynchronous functionality. 
It only exists in the explicit form.

[endsect]



[section:on_exit on_exit]

    #include <boost/process/async.hpp>


When an io_service is passed, the on_exit property can be used, to be notified 
when the child process exits.

```
io_service ios;
spawn("ls", on_exit=[](int exit, const std::error_code& ec_in){}); 
```

The following syntax is valid:

```
on_exit=function;
on_exit(function);
```

[endsect]

[section:io I/O]

    #include <boost/process/io.hpp>

The most complex part in this library is the I/O with the child process. There 
are five modes that can be used.

* File I/O
* Synchronouse Pipe
* Asynchronous Pipe
* Closing
* Redirecting to null
 
The properties described here are
 
* `std_in`
* `std_out`
* `std_err`

which should not bee confused with stdin etc.
 
Additionally, the output streams can be combined via &, i.e. the following code is valid:

    system("program", (std_out & std_err ) > "log.txt");

This property has no overload variant.

[section:file_io File I/O]

The file I/O simple redirects the stream to a file, where the valid types are

* `boost::filesystem::path`
* `std::string`
* `const char*`
* `FILE*` 

FILE* is explicitly added, so the process can easily redirect the output stream 
of the child to another output stream of the process. That is:

    system("ls", std_out > stderr);
    
A syntax like `system("ls", std_out > std::cerr)` is not possible, due to the C++ 
implementation not providing access to the handle.    

The valid expressions for this property are

```
std_in < file;
std_in = file;
std_out > file;
std_out = file;
std_err > file;
std_err = file;
(std_out & std_err) > file;
(std_out & std_err) = file;
```

Here's an example:

   boost::filesystem::path log    = "my_log_file.txt";
   boost::filesystem::path input  = "input.txt";
   boost::filesystem::path output = "output.txt";
   system("my_prog", std_out>output, std_in<input, std_err>log);
   

[endsect]


[section:sync_pipe_io Synchronous Pipe I/O]

As explained in the corresponding section, the boost.process library provides a
[classref boost::process::basic_pipe pipe] class which can be used to communicate 
with child processes. 

[note Technically the [classref boost::process::async_pipe async_pipe]
works synchronous here, since no asio implementation is used by the library here.
The async-operation will then however not end if the process is finished, since 
the pipe remains open. You can use the async_close function with on_exit to fix that.]

Valid types for pipe I/O are the following:

* `basic_pipe`
* `async_pipe`
* `basic_ipstream`
* `basic_opstream` 
* `basic_pstream`
 
Valid expressions with pipes are these:

```
std_in < pipe;
std_in = pipe;
std_out > pipe;
std_out = pipe;
std_err > pipe;
std_err = pipe;
(std_out & std_err) > pipe;
(std_out & std_err) = pipe;

```

Note that the pipe may also be used between several processes, like this:

   pipe p;
   child c1("nm", "a.out", std_out>p);
   chlid c2("c++filt", std_in<p);

[endsect]

[section:async_pipe_io Asynchronous Pipe I/O]

Asynchronous Pipe I/O classifies communication which has automatically handling
of the async operations by the process library. This means, that a pipe will be
constructed, the async_read/-write will be automatically started, and that the 
end of the child process will also close the pipe.

Valid types for pipe I/O are the following:

* `boost::asio::const_buffer` [footnote Constructed with boost::asio::buffer, only for std_in]
* `boost::asio::mutable_buffer` [footnote Constructed with boost::asio::buffer]
* `boost::asio::streambuf` 
* `std::future<std::string>` [footnote std_out & std_err only]
* `std::future<std::vector<char>> [footnote std_out & std_err only]
 
Valid expressions with pipes are these:

```
std_in < buffer;
std_in = buffer;
std_out > buffer;
std_out = buffer;
std_err > buffer;
std_err = buffer;
(std_out & std_err) > buffer;
(std_out & std_err) = buffer;
```

[note It is also possible to get a future for std_in, by chaining another `std::future<void>` onto it, i.e.

    std::future<void> fut;
    std::string data;
    spawn("prog", std_in < buffer(data) >  fut);
    fut.get();
 ]
[note `boost::asio::buffer` is also available in the `boost::process` namespace.] 
[endsect]

[section:closing Closing]

Closing a stream means, that no data can be written or read from it. 

This can be achieved by the following syntax.

```
std_in < close;
std_in = close;
std_in.close();
std_out > close;
std_out = close;
std_out.close();
std_err > close;
std_err = close;
std_err.close();
(std_out & std_err) > close;
(std_out & std_err) = close;
(std_out & std_err).close();
```

[endsect]

[section:null Redirecting to null]

Unlike closing a pipe, redirecting to null will allow to read and write data.
Written data will disregarded, while read data will only consist of `EOF`.
This can be achieved by the following syntax.

```
std_in < close;
std_in = close;
std_in.close();
std_out > close;
std_out = close;
std_out.close();
std_err > close;
std_err = close;
std_err.close();
(std_out & std_err) > buffer;
(std_out & std_err) = buffer;
(std_out & std_err).close();
```

[endsect]

[endsect]



[section:start_dir start_dir]

    #include <boost/process/start_dir.hpp>
    
To set the start dir, the `start_dir` property is provided. There is no overload format for it.

It can be used with `std::string` and `boost::filesystem::path`. 

```
system("ls", start_dir="./bin");
```

[endsect]



[section:group group]

    #include <boost/process/group.hpp>
    
Groups can be used to group processes. There is no guarantee that the launched 
process is not also in the same group as the father process. 
[note On Posix this is usally the case, while it depends on the group the fathers
process is in on windows. ]

As an example:

```
group g;
child c1("prog1", g);
child c2("prog2", g);

g.terminate(); //terminate c1 and c2. 
```

There is no explicit property for this feature.

[endsect]


[section:env env]

    #include <boost/process/env.hpp>
    
The `env` property provides a functional way to modify the environment used by
the child process. If none is passed the environment is inherited from the father
process. Appending means that the environment will be interpreted as a ';' 
seperated list as used in `PATH`.

The following expressions are valid.

```
//assign or create variable
env[NAME] = VALUE;
env[NAME] = {VAL1, VAL2};
env(NAME, VALUE);
env(NAME, {VAL1, VAL2});

//append to variable
env[NAME] += VALUE;
env[NAME] += {VAL1, VAL2};

//reset the variable
env[NAME]=boost::none;
env(NAME, boost::none);

//set the whole environment
env(environment());
env=environment();

```

As an example:

```
spawn("b2", env["PATH"]+="F:/boost", env["SOME_VAR"]=boost::none, env["NEW_VAR"]="VALUE");
```

The overload style is done by passing an instance of [classref boost::process::environment environment].
The above example would look like this.

```
environment e = this_process::environment();
e["PATH"]   += "F:/boost";
e.erase("SOME_VAR");
e["NEW_VAR"] = "VALUE";
spawn("b2", e);
```

[caution Passing an empty environment will cause and error.]

[endsect]


[endsect]