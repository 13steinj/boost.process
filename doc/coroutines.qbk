[section:coro Coroutines]
[section:stackless Stackless Coroutines]

Stackless coroutines can be implemented rather easily, so there is no need to
implement extra functionality concerning boost.process. 

```
struct stackless_t : boost::asio::coroutine
{
    child c;

    boost::asio::io_service & ios;
    
    stackless_t(boost::asio::io_service & ios) : ios(ios) {}
    
    void operator()(
            boost::system::error_code ec = boost::system::error_code(),
            std::size_t n = 0)
    {
        if (!ec) reenter (this)
        {
             c = child("my_program", ios, 
                    bp::on_exit=
                    [this](int, const std::error_code&)
                    {
                        (*this)(); //this is the reentry for the coroutine
                    });
            yield; //yield the thing.
        }
    }
};
///post the coroutine to a io-service and run it
int main()
{
    boost::asio::io_service ios;
    ios.post(stackless_t(ios));
    ios.run();
    return 0;
}
```

[endsect]

[section:stackful Stackful Coroutines]

For stackful coroutines this is not as simple, because the members of 
`boost::asio::yield_context` are not documented. Using a 
stackful coroutine could be implemented like this:

```
void cr(boost::asio::yield_context yield_) //my coroutine
{
    auto coro = yield_.coro.lock();
    child c("my-program", 
        on_exit=
            [coro](int, const std::error_code & ec)
            {
                auto &c = *coro; //renter the coroutine.
                if (c)
                    c();
            });
            
    yield_.ca(); //yield and return when the process is finished.
}
```

This example still has a problem: when using async-io the pipe buffer might not
be complete yet, which is why we should posted to the io-service.
In order to simplify this problem, boost.process provides a simple way to use
stackful coroutines, which looks as follows:

```
void cr(boost::asio::yield_context yield_)
{
    system("my-program", yield_);
}
```

This will automatically suspend the coroutine until the program is finished.

[endsect]
[endsect]